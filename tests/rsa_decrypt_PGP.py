#!/usr/bin/env python
import hashlib
import time
import os
import sys

#from progressbar import ProgressBar, AnimatedMarker, Timer, Bar, Percentage, Widget

import pgpy
from pgpy import PGPKey
from pgpy.constants import PubKeyAlgorithm, KeyFlags, HashAlgorithm, SymmetricKeyAlgorithm, CompressionAlgorithm

import binascii

from onlykey import OnlyKey, Message

'''
print 'Initialize OnlyKey client...'
ok = OnlyKey()
print 'Done'
print

time.sleep(2)

ok.read_string(timeout_ms=100)
empty = 'a'
while not empty:
    empty = ok.read_string(timeout_ms=100)

time.sleep(1)
print 'You should see your OnlyKey blink 3 times'
print

print 'Enter RSA slot number to use for decryption (1 - 4)'
print
slot = int(raw_input())

print 'Trying to read the public RSA N part 1...'
ok.send_message(msg=Message.OKGETPUBKEY, payload=chr(slot))  #, payload=[1, 1])
time.sleep(1)
for _ in xrange(10):
    ok_pubkey1 = ok.read_bytes(64, to_str=True)
    if len(ok_pubkey1) == 64:
        break

print

print 'received=', repr(ok_pubkey1)

print 'Trying to read the public RSA N part 2...'
for _ in xrange(10):
    ok_pubkey2 = ok.read_bytes(64, to_str=True)
    if len(ok_pubkey2) == 64:
        break

print

print 'received=', repr(ok_pubkey2)

print 'Trying to read the public RSA N part 3...'
for _ in xrange(10):
    ok_pubkey3 = ok.read_bytes(64, to_str=True)
    if len(ok_pubkey3) == 64:
        break


print

print 'received=', repr(ok_pubkey3)

print 'Trying to read the public RSA N part 4...'
for _ in xrange(10):
    ok_pubkey4 = ok.read_bytes(64, to_str=True)
    if len(ok_pubkey4) == 64:
        break


print

print 'received=', repr(ok_pubkey4)

print 'Trying to read the public RSA N part 5...'
for _ in xrange(10):
    ok_pubkey5 = ok.read_bytes(64, to_str=True)
    if len(ok_pubkey5) == 64:
        break


print

print 'received=', repr(ok_pubkey5)

print 'Trying to read the public RSA N part 6...'
for _ in xrange(10):
    ok_pubkey6 = ok.read_bytes(64, to_str=True)
    if len(ok_pubkey6) == 64:
        break


print

print 'received=', repr(ok_pubkey6)

print 'Trying to read the public RSA N part 7...'
for _ in xrange(10):
    ok_pubkey7 = ok.read_bytes(64, to_str=True)
    if len(ok_pubkey7) == 64:
        break


print

print 'received=', repr(ok_pubkey7)

print 'Trying to read the public RSA N part 8...'
for _ in xrange(10):
    ok_pubkey8 = ok.read_bytes(64, to_str=True)
    if len(ok_pubkey8) == 64:
        break

print

print 'received=', repr(ok_pubkey8)

if not ok_pubkey2:
    raise Exception('failed to set the RSA key')

print 'Received Public Key generated by OnlyKey'
ok_pubkey = ok_pubkey1 + ok_pubkey2 + ok_pubkey3 + ok_pubkey4 + ok_pubkey5 + ok_pubkey6 + ok_pubkey7 + ok_pubkey8
print 'Public N=', repr(ok_pubkey)
print

print 'Key Size =', len(ok_pubkey)
print

ok_pubkey = ok_pubkey.encode("HEX")

n = long(ok_pubkey, 16)
e = int('10001', 16)
'''


# we can start by generating a primary key. For this example, we'll use RSA, but it could be DSA or ECDSA as well
#with open('test_priv.asc', 'rb') as f:
#    t = f.read().replace('\r', '')

#priv_key, _ = PGPKey.from_blob(t)
priv_key = pgpy.PGPKey()
# we now have some key material, but our new key doesn't have a user ID yet, and therefore is not yet usable!
#with priv_key.unlock("test"):
#    uid = pgpy.PGPUID.new('Abraham Lincoln', comment='Honest Abe', email='abraham.lincoln@whitehouse.gov')
# now we must add the new user id to the key. We'll need to specify all of our preferences at this point
# because PGPy doesn't have any built-in key preference defaults at this time
# this example is similar to GnuPG 2.1.x defaults, with no expiration or preferred keyserver
#    priv_key.add_uid(uid, usage={KeyFlags.Sign, KeyFlags.EncryptCommunications, KeyFlags.EncryptStorage},
#                hashes=[HashAlgorithm.SHA256, HashAlgorithm.SHA384, HashAlgorithm.SHA512, HashAlgorithm.SHA224],
#                ciphers=[SymmetricKeyAlgorithm.AES256, SymmetricKeyAlgorithm.AES192, SymmetricKeyAlgorithm.AES128],
#                compression=[CompressionAlgorithm.ZLIB, CompressionAlgorithm.BZ2, CompressionAlgorithm.ZIP, CompressionAlgorithm.Uncompressed])

print 'Paste OpenPGP Message, press Ctrl+D or Ctrl+Z(Windows only) when finished'
print

msg_blob = sys.stdin.read()

print 'Do you want to sign or decrypt the message?'
print 's=sign, d=decrypt'
print

action = raw_input()

# PGPMessage will automatically determine if this is a cleartext message or not
# message_from_file = pgpy.PGPMessage.from_file("path/to/a/message")
if action == 's':
    message_from_blob = pgpy.PGPMessage.from_blob(msg_blob)
    print
    print 'Message=', repr(message_from_blob)
    #with priv_key.unlock("test"):
    signed_message |= priv_key.sign(message_from_blob)
    print
    print 'Message with signature =', repr(signed_message)

if action == 'd':
    message_from_blob = pgpy.PGPMessage.from_blob(msg_blob)
    print
    print 'Message=', repr(message_from_blob)
    #with priv_key.unlock("test"):
    decrypted_message = priv_key.decrypt(message_from_blob)
        #decrypted_message2 = priv_key.parse(decrypted_message)
        #decrypted_message3 = priv_key.bytes_to_text(message_from_blob)
    print
    dec_text = str(decrypted_message)
    print 'Encoded Decrypted Message ='
    print dec_text
    print
    dec_bytes = decrypted_message.__bytes__()
    print 'Decoded Decrypted Message =', str(dec_bytes)

print 'Done'
